{"version":3,"sources":["../../bin/cli.ts","../../src/whisper.ts","../../src/git.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport minimist from 'minimist';\nimport { whisper } from '..';\n\nconst start = Date.now();\nconst argv = minimist(process.argv.slice(2), {\n  boolean: ['stream', 'debug', 'diff'],\n  alias: {\n    max_tokens: 'M',\n    model: 'm',\n    stream: 's',\n    debug: 'd',\n    temperature: 't',\n    // preset: 'p',\n    diff: 'D'\n  },\n  default: {\n    model: 'gpt-4o',\n    max_tokens: 1000,\n    temperature: 0.8,\n    stream: true,\n    debug: false,\n    diff: false\n  }\n});\n\nif (argv.h || argv.help) {\n  // -p, --preset      Preset to use\n\n  console.log(`\n    Usage: commit-whisperer (or cw) [options] [text]\n\n    Options:\n      -M, --max-tokens  Max tokens (default: 1000)\n      -m, --model       Model to use (default: gpt-4o)\n      -t, --temperature Temperature (default: 0.8)\n      -s, --stream      Stream output\n      -d, --debug       Debug mode\n      -D, --diff        Include git diff in context\n      -h, --help        Display this help message\n  `);\n  process.exit(0);\n}\n\nif (argv._.length === 0) {\n  argv._.push('Create a commit message for this release.');\n}\n\nwhisper({\n  messages: [{ role: 'user', content: argv._.join(' ') }],\n  includeGitDiff: argv.includeGitDiff,\n  openaiConfig: {\n    model: argv.model,\n    max_completion_tokens: argv.max_tokens,\n    temperature: argv.temperature,\n    stream: argv.stream\n  },\n  onRead: (content: string) => content && process.stdout.write(content)\n})\n  .then(response => {\n    if (!argv.stream) {\n      console.log(response.content);\n    } else {\n      console.log();\n    }\n\n    if (argv.debug) {\n      console.log(`\\n${Date.now() - start}ms`);\n    }\n  })\n  .catch(error => console.error(error));\n","import 'dotenv/config';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport Enquirer from 'enquirer';\nimport OpenAI from 'openai';\nimport { getGitState } from '~/git';\n\nexport const systemPrompt = `You are Commit-Whisperer, a genius at writing useful commit messages. Write a commit message that perfectly summarizes all important points based on the information provided by the user. The user may provide a git diff, instructions, or other details to help you craft the perfect message. Don't say \"main module\" if the referenced function has a name.\n\nIf nothing is provided, or it appears to be a first commit, respond with a first commit message with a humorous tone.\n\nIf changes are minimal, keep your message very brief, direct, and to the point: \"Fixes typo in docs\", \"Updated README\", \"Adds unit test for create method in User service\", etc.\n`;\n\nexport const defaults = {\n  temperature: 0.8,\n  max_completion_tokens: 1000,\n  model: 'gpt-4o',\n  stream: false\n};\n\nconst getPromptMessage = async optionsMessage => {\n  if (optionsMessage != null) {\n    return optionsMessage;\n  }\n\n  const enquirer = new Enquirer();\n  const { message } = await enquirer.prompt({\n    type: 'input',\n    name: 'message',\n    message: 'Enter instructions for the commit message (optional)'\n  });\n\n  return message;\n};\n\nconst formatContent = ({\n  gitState,\n  diff,\n  message,\n  pkg\n}: {\n  gitState: any;\n  diff: any;\n  message: string;\n  pkg: any;\n}) => {\n  const lines = [];\n\n  if (message) {\n    lines.push(`Instructions: ${message}`);\n    lines.push('');\n  }\n\n  if (pkg) {\n    lines.push('**Package details**');\n    lines.push(`- Name: ${pkg.name}`);\n    lines.push(`- Version: ${pkg.version}`);\n    lines.push(`- Description: ${pkg.description}`);\n    lines.push('');\n  }\n\n  if (gitState) {\n    lines.push(`**Git status**:\\n${gitState.status}`);\n    lines.push('');\n\n    if (diff) {\n      lines.push(`**Git diff**:\\n${gitState.diff}`);\n      lines.push('');\n    }\n  }\n\n  return lines.join('\\n');\n};\n\nexport const whisper = async ({\n  cwd = process.cwd(),\n  useGitState = true,\n  usePackageJson = true,\n  message: optionsMessage,\n  instructions,\n  diff = false,\n  orgId = process.env.OPENAI_ORG_ID,\n  apiKey = process.env.OPENAI_API_KEY,\n  openaiConfig = {},\n  onRead,\n  ...options\n}: {\n  useGitState?: boolean;\n  orgId?: string;\n  apiKey?: string;\n  model?: string;\n} = {}) => {\n  const message = await getPromptMessage(optionsMessage);\n  const gitState = useGitState ? await getGitState(cwd) : null;\n  const pkgPath = path.resolve(cwd, 'package.json');\n  const pkg = usePackageJson && fs.existsSync(pkgPath)\n    ? JSON.parse(fs.readFileSync(pkgPath, 'utf8'))\n    : null;\n\n  const openai = new OpenAI({ apiKey, orgId });\n  const format = options.formatContent || formatContent;\n\n  const config = {\n    ...defaults,\n    ...openaiConfig\n  };\n\n  const response = await openai.chat.completions.create({\n    messages: [\n      { role: 'system', content: instructions || systemPrompt },\n      { role: 'user', content: format({ gitState, message, pkg, diff }) }\n    ],\n    ...config\n  });\n\n  let content = '';\n\n  if (config.stream === true) {\n    for await (const event of response) {\n      if (event.choices) {\n        onRead?.(event.choices[0].delta.content);\n        content += event.choices[0].delta.content;\n      }\n    }\n  } else {\n    content = response.choices[0].message.content;\n  }\n\n  response.content = content;\n  return response;\n};\n","import { execSync } from 'child_process';\n\nexport const getGitState = (cwd = process.cwd()) => {\n  try {\n    const status = execSync('git status --porcelain', { cwd }).toString().trim();\n    const diff = execSync('git diff', { cwd }).toString().trim();\n\n    return {\n      status,\n      diff\n    };\n  } catch (error) {\n    throw new Error('Failed to get git state: ' + error.message);\n  }\n};\n"],"mappings":"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","names":["Enquirer","path","fs","OpenAI","minimist"]}